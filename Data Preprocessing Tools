# Data Preprocessing Tools

# Importing the libraries
import numpy as np
# For graphs and plotting
import matplotlib.pyplot as plt
# FOr importing and preprocessing data
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('Data.csv')
# Create two new features: matrix of features (what we use to predict)
# and dependent variable vector (what we want to predict) which is usually the last column
X = dataset.iloc[:, :-1].values # All the rows and all the columns but the last
y = dataset.iloc[:, -1].values  # All the rows and only the last column
print(f"Our X values: \n{X}")
print()
print(f"Our y values: \n{y}")
print()
# Taking care of missing data
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
imputer.fit(X[:, 1:3])  #excludes the first and last column, includes column 1 and 2
# Apply the imputer's transformation and replace missing values with the mean value
# of the non-missing values in the same column and then assign those values to the
# original matrix of features
X[:, 1:3] = imputer.transform(X[:, 1:3])
print(f"Missing data replaced: \n{X}")
print()
# Encoding categorical data
# Encoding the Independent Variable
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
# Taking two arguments, transformers and remainder.  Need to specify three things for
# transformers; kind of transformation, what kind of encoding, and index of columns
# expected format for transformers is [()].  Passthrough indicates we want to keep the
# that won't be applied some transformation.
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')
X = np.array(ct.fit_transform(X))
print(f"Applied transformation: \n{X}")
print()
# Encoding the Dependent Variable
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)
print(f"Applied labels: {y}")
print()
# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)
print(X_train)
print()
print(X_test)
print()
print(y_train)
print()
print(y_test)
print()

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train[:, 3:] = sc.fit_transform(X_train[:, 3:])
X_test[:, 3:] = sc.transform(X_test[:, 3:])
print(X_train)
print(X_test)
